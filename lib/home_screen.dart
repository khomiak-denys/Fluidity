import 'package:flutter/material.dart';
import 'widgets/water_progress.dart';
import 'widgets/water_intake.dart';
import 'ui/button.dart';

class HomeScreen extends StatefulWidget {
  final int dailyGoal;

  const HomeScreen({super.key, required this.dailyGoal});

  @override
  State<HomeScreen> createState() => _HomeScreenState();
}

class _HomeScreenState extends State<HomeScreen> {
  List<WaterIntakeEntry> entries = [];

  void handleQuickAdd(int amount, String type) {
    final now = TimeOfDay.now();
    setState(() {
      entries.add(WaterIntakeEntry(
        id: DateTime.now().millisecondsSinceEpoch.toString(),
        amount: amount,
        time: now.format(context),
        type: type,
      ));
    });
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(content: Text('–î–æ–¥–∞–Ω–æ $amount ml –≤–æ–¥–∏! üíß')),
    );
  }

  void handleCustomAdd(int amount, String type, String? comment) {
    final now = TimeOfDay.now();
    setState(() {
      entries.add(WaterIntakeEntry(
        id: DateTime.now().millisecondsSinceEpoch.toString(),
        amount: amount,
        time: now.format(context),
        type: type,
      ));
    });
    Navigator.of(context).pop();
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(content: Text('–î–æ–¥–∞–Ω–æ $amount ml –≤–æ–¥–∏! üíß')),
    );
  }

  void handleDelete(String id) {
    setState(() {
      entries.removeWhere((e) => e.id == id);
    });
    ScaffoldMessenger.of(context).showSnackBar(
      const SnackBar(content: Text('–ó–∞–ø–∏—Å –≤–∏–¥–∞–ª–µ–Ω–æ')),
    );
  }

  int get totalIntake => entries.fold(0, (sum, e) => sum + e.amount);

  @override
  Widget build(BuildContext context) {
    final bool isGoalAchieved = totalIntake >= widget.dailyGoal;
    return Scaffold(
      appBar: AppBar(
        title: const Text('Fluidity'),
        centerTitle: true,
      ),
      body: Padding(
        padding: const EdgeInsets.symmetric(horizontal: 12, vertical: 8),
        child: ListView(
          children: [
            // Goal Achievement Celebration
            if (isGoalAchieved)
              Card(
                color: Colors.green.shade50,
                child: Padding(
                  padding: const EdgeInsets.all(12.0),
                  child: Column(
                    children: const [
                      Text('üéâ', style: TextStyle(fontSize: 32)),
                      SizedBox(height: 8),
                      Text('–í—ñ—Ç–∞—î–º–æ!', style: TextStyle(fontWeight: FontWeight.bold, color: Colors.green)),
                      Text('–í–∏ –¥–æ—Å—è–≥–ª–∏ —Å–≤–æ—î—ó –¥–µ–Ω–Ω–æ—ó —Ü—ñ–ª—ñ!', style: TextStyle(color: Colors.green)),
                    ],
                  ),
                ),
              ),
            const SizedBox(height: 16),
            // Progress Ring
            WaterProgress(current: totalIntake.toDouble(), goal: widget.dailyGoal.toDouble()),
            const SizedBox(height: 16),
            // Quick Add Buttons –∑ AppButton
            Card(
              color: Colors.cyan.shade50,
              child: Padding(
                padding: const EdgeInsets.all(12.0),
                child: Row(
                  mainAxisAlignment: MainAxisAlignment.spaceAround,
                  children: [
                    AppButton(
                      text: 'ü•õ 200ml',
                      onPressed: () => handleQuickAdd(200, 'glass'),
                      variant: ButtonVariant.primary,
                      size: ButtonSize.medium,
                    ),
                    AppButton(
                      text: 'üçº 500ml',
                      onPressed: () => handleQuickAdd(500, 'bottle'),
                      variant: ButtonVariant.primary,
                      size: ButtonSize.medium,
                    ),
                  ],
                ),
              ),
            ),
            const SizedBox(height: 16),
            // Entries List
            if (entries.isNotEmpty)
              Column(
                children: entries
                    .map((entry) => WaterIntakeCard(
                          entry: entry,
                          onDelete: handleDelete,
                        ))
                    .toList(),
              )
            else
              Card(
                shape: RoundedRectangleBorder(
                  side: BorderSide(color: Colors.cyan.shade200, style: BorderStyle.solid, width: 2),
                  borderRadius: BorderRadius.circular(12),
                ),
                child: Padding(
                  padding: const EdgeInsets.all(24.0),
                  child: Column(
                    children: const [
                      Text('üíß', style: TextStyle(fontSize: 48)),
                      SizedBox(height: 8),
                      Text('–ü–æ—á–Ω—ñ—Ç—å –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è!', style: TextStyle(fontWeight: FontWeight.bold, fontSize: 18)),
                      SizedBox(height: 4),
                      Text('–î–æ–¥–∞–π—Ç–µ —Å–≤—ñ–π –ø–µ—Ä—à–∏–π –∑–∞–ø–∏—Å –≤–æ–¥–∏, –Ω–∞—Ç–∏—Å–Ω—É–≤—à–∏ –Ω–∞ –∫–Ω–æ–ø–∫–∏ –≤–∏—â–µ –∞–±–æ FAB –∫–Ω–æ–ø–∫—É', textAlign: TextAlign.center),
                    ],
                  ),
                ),
              ),
          ],
        ),
      ),
      floatingActionButton: FloatingActionButton(
        onPressed: () {
          // Show dialog to add custom water intake
          showDialog(
            context: context,
            builder: (context) {
              final amountController = TextEditingController();
              String type = 'glass';
              String? comment;
              return AlertDialog(
                title: const Text('–î–æ–¥–∞—Ç–∏ –≤–æ–¥–∏'),
                content: Column(
                  mainAxisSize: MainAxisSize.min,
                  children: [
                    TextField(
                      controller: amountController,
                      keyboardType: TextInputType.number,
                      decoration: const InputDecoration(labelText: '–ö—ñ–ª—å–∫—ñ—Å—Ç—å (–º–ª)'),
                    ),
                    DropdownButton<String>(
                      value: type,
                      items: const [
                        DropdownMenuItem(value: 'glass', child: Text('ü•õ Glass')),
                        DropdownMenuItem(value: 'bottle', child: Text('üçº Bottle')),
                        DropdownMenuItem(value: 'cup', child: Text('‚òï Cup')),
                      ],
                      onChanged: (v) {
                        if (v != null) type = v;
                      },
                    ),
                    TextField(
                      onChanged: (v) => comment = v,
                      decoration: const InputDecoration(labelText: '–ö–æ–º–µ–Ω—Ç–∞—Ä (–æ–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ)'),
                    ),
                  ],
                ),
                actions: [
                  AppButton(
                    text: '–°–∫–∞—Å—É–≤–∞—Ç–∏',
                    onPressed: () => Navigator.of(context).pop(),
                    variant: ButtonVariant.outline,
                    size: ButtonSize.medium,
                  ),
                  AppButton(
                    text: '–î–æ–¥–∞—Ç–∏',
                    onPressed: () {
                      final value = int.tryParse(amountController.text) ?? 0;
                      if (value > 0) handleCustomAdd(value, type, comment);
                    },
                    variant: ButtonVariant.primary,
                    size: ButtonSize.medium,
                  ),
                ],
              );
            },
          );
        },
        child: const Icon(Icons.add),
      ),
    );
  }
}